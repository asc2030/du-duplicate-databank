{"slots":{"0":{"name":"source","type":{"events":[],"methods":[]}},"1":{"name":"target","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- Databank Duplicator\n-- connect a databank and name as \"source\"\n-- connect target databank with slot name \"target\"\n-- activate the board and follow instructions in lua channel\nfunction handleTextCommandInput(text)\n    if text == 'confirm' then\n        duplicate(true, false)\n    elseif text == 'confirm overwrite' then\n        duplicate(true, true)\n    else\n        duplicate(false,false)\n    end\nend\n\nfunction duplicate(action, overwrite)\n    local errMsg = false\n    if source == nil then\n        errMsg = 'No source databank found.'\n    end\n    if target == nil then\n        local thisMsg = 'No target databank found.'\n        errMsg = errMsg and errMsg..' '..thisMsg or thisMsg\n    end\n    if errMsg then\n        system.print(errMsg)\n        return false\n    end\n\n    local sourceKeys = json.decode(source.getKeys())\n    local duplicateKeyCount, skippedKeyCount, newKeyCount, newKeyString = 0, 0, 0, false\n    \n    for _, k in pairs(sourceKeys) do\n\n        if target.hasKey(k) == 1 then \n            duplicateKeyCount = duplicateKeyCount + 1\n            if action and overwrite then\n                target.setStringValue(k, source.getStringValue(k))\n            elseif action then\n                local sourceValue = source.getStringValue(k)\n                if target.getStringValue(k) ~= sourceValue then\n                    local increment = 2\n                    local newKey = k..'('..increment..')'\n                    while target.hasKey(newKey) == 1 do\n                        increment = increment + 1\n                        newKey = k..'('..increment..')'\n                    end\n                    target.setStringValue(newKey, sourceValue)\n                    newKeyCount = newKeyCount + 1\n                    newKeyString = newKeyString == false and newKey or newKeyString..', '..newKey\n                else\n                    skippedKeyCount = skippedKeyCount + 1\n                end\n            end\n        else            \n            if action then\n                target.setStringValue(k, source.getStringValue(k))\n            end\n        end\n    end\n    \n    if not action then\n        system.print('..:: DU Databank Duplicator ::..')\n        system.print(source.getNbKeys() .. ' keys in source databank.')\n        system.print(target.getNbKeys() .. ' keys in target databank.')\n        system.print(duplicateKeyCount .. ' duplicate keys were found between the databanks.')\n        system.print(':: Actions - ')\n        system.print('Type \"confirm\" to copy the databank without overwriting existing keys.')\n        system.print('Type \"confirm overwrite\" to copy the databank, overwriting existing keys.')\n    else\n        system.print(':: Completed! ')\n        if overwrite then\n            system.print('The databank was copied and existing data was overwritten.')\n        else \n            system.print('The databank was copied and existing data was untouched.')\n            if skippedKeyCount > 0 then\n                system.print(skippedKeyCount..' keys were skipped as values matched.')\n            end\n            if newKeyCount > 0 then\n                if newKeyCount == 1 then\n                    system.print('1 new key was created as to same key but different value.')\n                    system.print('Created key is: '..newKeyString)\n                else\n                    system.print(newKeyCount..' new keys were created as to same keys but different values.')\n                    system.print('Created keys are: '..newKeyString)\n                end\n            end\n        end\n    end\nend\n\nduplicate(false, false)\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"handleTextCommandInput(text)","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"1"}],"methods":[],"events":[]}